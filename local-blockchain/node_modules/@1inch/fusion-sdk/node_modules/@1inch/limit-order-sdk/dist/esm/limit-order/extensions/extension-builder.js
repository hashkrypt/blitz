function _class_call_check(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _create_class(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
import { isHexString, trim0x } from '@1inch/byte-utils';
import assert from 'assert';
import { Extension } from './extension.js';
import { ZX } from '../../constants.js';
export var ExtensionBuilder = /*#__PURE__*/ function() {
    "use strict";
    function ExtensionBuilder() {
        _class_call_check(this, ExtensionBuilder);
        _define_property(this, "makerAssetSuffix", ZX);
        _define_property(this, "takerAssetSuffix", ZX);
        _define_property(this, "makingAmountData", ZX);
        _define_property(this, "takingAmountData", ZX);
        _define_property(this, "predicate", ZX);
        _define_property(this, "makerPermit", ZX);
        _define_property(this, "preInteraction", ZX);
        _define_property(this, "postInteraction", ZX);
        _define_property(this, "customData", ZX);
    }
    _create_class(ExtensionBuilder, [
        {
            key: "withMakerAssetSuffix",
            value: function withMakerAssetSuffix(suffix) {
                assert(isHexString(suffix), 'MakerAssetSuffix must be valid hex string');
                this.makerAssetSuffix = suffix;
                return this;
            }
        },
        {
            key: "withTakerAssetSuffix",
            value: function withTakerAssetSuffix(suffix) {
                assert(isHexString(suffix), 'TakerAssetSuffix must be valid hex string');
                this.takerAssetSuffix = suffix;
                return this;
            }
        },
        {
            key: "withMakingAmountData",
            value: /**
     *
     * @param address Address of contract which will be called with `data` to calculate making amount
     * @param data
     */ function withMakingAmountData(address, data) {
                assert(isHexString(data), 'MakingAmountData must be valid hex string');
                this.makingAmountData = address.toString() + trim0x(data);
                return this;
            }
        },
        {
            key: "withTakingAmountData",
            value: /**
     *
     * @param address Address of contract which will be called with `data` to calculate taking amount
     * @param data
     */ function withTakingAmountData(address, data) {
                assert(isHexString(data), 'TakingAmountData must be valid hex string');
                this.takingAmountData = address.toString() + trim0x(data);
                return this;
            }
        },
        {
            key: "withPredicate",
            value: function withPredicate(predicate) {
                assert(isHexString(predicate), 'Predicate must be valid hex string');
                this.predicate = predicate;
                return this;
            }
        },
        {
            key: "withMakerPermit",
            value: function withMakerPermit(tokenFrom, permitData) {
                assert(isHexString(permitData), 'Permit data must be valid hex string');
                this.makerPermit = tokenFrom.toString() + trim0x(permitData);
                return this;
            }
        },
        {
            key: "withPreInteraction",
            value: function withPreInteraction(interaction) {
                this.preInteraction = interaction.encode();
                return this;
            }
        },
        {
            key: "withPostInteraction",
            value: function withPostInteraction(interaction) {
                this.postInteraction = interaction.encode();
                return this;
            }
        },
        {
            key: "withCustomData",
            value: function withCustomData(data) {
                assert(isHexString(data), 'Custom data must be valid hex string');
                this.customData = data;
                return this;
            }
        },
        {
            key: "build",
            value: function build() {
                return new Extension({
                    makerAssetSuffix: this.makerAssetSuffix,
                    takerAssetSuffix: this.takerAssetSuffix,
                    makingAmountData: this.makingAmountData,
                    takingAmountData: this.takingAmountData,
                    predicate: this.predicate,
                    makerPermit: this.makerPermit,
                    preInteraction: this.preInteraction,
                    postInteraction: this.postInteraction,
                    customData: this.customData
                });
            }
        }
    ]);
    return ExtensionBuilder;
}();
