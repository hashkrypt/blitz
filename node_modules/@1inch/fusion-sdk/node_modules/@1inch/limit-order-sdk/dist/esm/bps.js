function _class_call_check(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _create_class(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
import assert from 'assert';
/**
 * Basis point in range [0, 100]%
 *
 * 1bps = 0.01%
 */ export var Bps = /*#__PURE__*/ function() {
    "use strict";
    function Bps(value) {
        _class_call_check(this, Bps);
        _define_property(this, "value", void 0);
        this.value = value;
        assert(value >= 0 && value <= 10000, "invalid bps ".concat(value));
    }
    _create_class(Bps, [
        {
            key: "equal",
            value: function equal(other) {
                return this.value === other.value;
            }
        },
        {
            key: "isZero",
            value: function isZero() {
                return this.value === 0n;
            }
        },
        {
            key: "toPercent",
            value: /**
     * @param base what represents 100%
     */ function toPercent() {
                var base = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 1n;
                return Number(this.value * base) / 100;
            }
        },
        {
            key: "toFraction",
            value: /**
     * @param base what represents 100%
     */ function toFraction() {
                var base = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 1n;
                return Number(this.value * base) / 10000;
            }
        },
        {
            key: "toString",
            value: function toString() {
                return this.value.toString();
            }
        }
    ], [
        {
            key: "fromPercent",
            value: /**
     * Create BPS from percent value.
     * If `value` has precision more than 1bps (with accounting to `base`), it will be rounded down
     * @param val
     * @param base what represents 100%
     */ function fromPercent(val) {
                var base = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1n;
                return new Bps(BigInt(100 * val) / base);
            }
        },
        {
            key: "fromFraction",
            value: /**
     * Create BPS from fraction value.
     * If `value` has precision more than 1bps (with accounting to `base`), it will be rounded down
     * @param val
     * @param base what represents 100%
     */ function fromFraction(val) {
                var base = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1n;
                return new Bps(BigInt(10000 * val) / base);
            }
        }
    ]);
    return Bps;
}();
_define_property(Bps, "ZERO", new Bps(0n));
