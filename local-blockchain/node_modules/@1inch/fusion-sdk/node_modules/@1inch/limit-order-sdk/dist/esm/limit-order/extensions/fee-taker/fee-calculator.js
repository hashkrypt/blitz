function _class_call_check(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _create_class(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
import { Fees } from './fees.js';
import { mulDiv, Rounding } from '../../../utils/mul-div.js';
export var FeeCalculator = /*#__PURE__*/ function() {
    "use strict";
    function FeeCalculator(fees, whitelist) {
        _class_call_check(this, FeeCalculator);
        _define_property(this, "fees", void 0);
        _define_property(this, "whitelist", void 0);
        this.fees = fees;
        this.whitelist = whitelist;
    }
    _create_class(FeeCalculator, [
        {
            key: "getTakingAmount",
            value: function getTakingAmount(taker, orderTakingAmount) {
                var fees = this.getFeesForTaker(taker);
                return mulDiv(orderTakingAmount, Fees.BASE_1E5 + fees.resolverFee + fees.integratorFee, Fees.BASE_1E5, Rounding.Ceil);
            }
        },
        {
            key: "getMakingAmount",
            value: function getMakingAmount(taker, makingAmount) {
                var fees = this.getFeesForTaker(taker);
                return mulDiv(makingAmount, Fees.BASE_1E5, Fees.BASE_1E5 + fees.resolverFee + fees.integratorFee);
            }
        },
        {
            key: "getResolverFee",
            value: /**
     * Fee in `takerAsset` which resolver pays to resolver fee receiver
     *
     * @param taker who will fill order
     * @param orderTakingAmount taking amount from order struct
     */ function getResolverFee(taker, orderTakingAmount) {
                // the logic copied from contract to avoid calculation issues
                // @see https://github.com/1inch/limit-order-protocol/blob/22a18f7f20acfec69d4f50ce1880e8e662477710/contracts/extensions/FeeTaker.sol#L145
                var takingAmount = this.getTakingAmount(taker, orderTakingAmount);
                var fees = this.getFeesForTaker(taker);
                return mulDiv(takingAmount, fees.resolverFee, Fees.BASE_1E5 + fees.resolverFee + fees.integratorFee);
            }
        },
        {
            key: "getIntegratorFee",
            value: /**
     * Fee in `takerAsset` which integrator gets to integrator wallet
     *
     * @param taker who will fill order
     * @param orderTakingAmount taking amount from order struct
     */ function getIntegratorFee(taker, orderTakingAmount) {
                // the logic copied from contract to avoid calculation issues
                // @see https://github.com/1inch/limit-order-protocol/blob/22a18f7f20acfec69d4f50ce1880e8e662477710/contracts/extensions/FeeTaker.sol#L145
                var takingAmount = this.getTakingAmount(taker, orderTakingAmount);
                var fees = this.getFeesForTaker(taker);
                var total = mulDiv(takingAmount, fees.integratorFee, Fees.BASE_1E5 + fees.resolverFee + fees.integratorFee);
                return mulDiv(total, BigInt(this.fees.integrator.share.toFraction(Fees.BASE_1E2)), Fees.BASE_1E2);
            }
        },
        {
            key: "getProtocolShareOfIntegratorFee",
            value: /**
     * Fee in `takerAsset` which protocol gets as share from integrator fee
     *
     * @param taker who will fill order
     * @param orderTakingAmount taking amount from order struct
     */ function getProtocolShareOfIntegratorFee(taker, orderTakingAmount) {
                // the logic copied from contract to avoid calculation issues
                // @see https://github.com/1inch/limit-order-protocol/blob/22a18f7f20acfec69d4f50ce1880e8e662477710/contracts/extensions/FeeTaker.sol#L145
                var takingAmount = this.getTakingAmount(taker, orderTakingAmount);
                var fees = this.getFeesForTaker(taker);
                var total = mulDiv(takingAmount, fees.integratorFee, Fees.BASE_1E5 + fees.resolverFee + fees.integratorFee);
                return total - this.getIntegratorFee(taker, orderTakingAmount);
            }
        },
        {
            key: "getProtocolFee",
            value: /**
     * Fee in `takerAsset` which protocol gets
     * It equals to `share from integrator fee plus resolver fee`
     *
     * @param taker who will fill order
     * @param orderTakingAmount taking amount from order struct
     */ function getProtocolFee(taker, orderTakingAmount) {
                var resolverFee = this.getResolverFee(taker, orderTakingAmount);
                var integratorPart = this.getProtocolShareOfIntegratorFee(taker, orderTakingAmount);
                return integratorPart + resolverFee;
            }
        },
        {
            key: "getFeesForTaker",
            value: function getFeesForTaker(taker) {
                var discountNumerator = this.whitelist.isWhitelisted(taker) ? Number(Fees.BASE_1E2) - this.fees.resolver.whitelistDiscount.toFraction(Fees.BASE_1E2) : 100;
                var resolverFee = BigInt(discountNumerator * this.fees.resolver.fee.toFraction(Fees.BASE_1E5)) / Fees.BASE_1E2;
                var resolverFeeBN = BigInt(resolverFee);
                var integratorFeeBN = BigInt(this.fees.integrator.fee.toFraction(Fees.BASE_1E5));
                return {
                    resolverFee: resolverFeeBN,
                    integratorFee: integratorFeeBN
                };
            }
        }
    ]);
    return FeeCalculator;
}();
