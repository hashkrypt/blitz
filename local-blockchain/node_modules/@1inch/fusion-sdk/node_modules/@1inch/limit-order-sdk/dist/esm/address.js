function _class_call_check(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _create_class(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
import { isAddress } from 'ethers';
import { add0x } from '@1inch/byte-utils';
import assert from 'assert';
export var Address = /*#__PURE__*/ function() {
    "use strict";
    function Address(val) {
        _class_call_check(this, Address);
        _define_property(this, "val", void 0);
        assert(isAddress(val), "Invalid address ".concat(val));
        this.val = val.toLowerCase();
    }
    _create_class(Address, [
        {
            key: "toString",
            value: function toString() {
                return this.val;
            }
        },
        {
            key: "equal",
            value: function equal(other) {
                return this.val === other.val;
            }
        },
        {
            key: "isNative",
            value: function isNative() {
                return this.equal(Address.NATIVE_CURRENCY);
            }
        },
        {
            key: "isZero",
            value: function isZero() {
                return this.equal(Address.ZERO_ADDRESS);
            }
        },
        {
            key: "lastHalf",
            value: function lastHalf() {
                return add0x(this.val.slice(-20));
            }
        }
    ], [
        {
            key: "fromBigInt",
            value: function fromBigInt(val) {
                return new Address(add0x(val.toString(16).padStart(40, '0')));
            }
        },
        {
            key: "fromFirstBytes",
            value: function fromFirstBytes(bytes) {
                return new Address(bytes.slice(0, 42));
            }
        }
    ]);
    return Address;
}();
_define_property(Address, "NATIVE_CURRENCY", new Address('0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee'));
_define_property(Address, "ZERO_ADDRESS", new Address('0x0000000000000000000000000000000000000000'));
