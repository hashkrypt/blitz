"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "LimitOrderWithFee", {
    enumerable: true,
    get: function() {
        return LimitOrderWithFee;
    }
});
var _byteutils = require("@1inch/byte-utils");
var _assert = /*#__PURE__*/ _interop_require_default(require("assert"));
var _feetakerextension = require("./extensions/fee-taker/fee-taker.extension.js");
var _limitorder = require("./limit-order.js");
var _makertraits = require("./maker-traits.js");
var _amounts = require("./amounts.js");
var _address = require("../address.js");
var _randbigint = require("../utils/rand-bigint.js");
function _assert_this_initialized(self) {
    if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self;
}
function _call_super(_this, derived, args) {
    derived = _get_prototype_of(derived);
    return _possible_constructor_return(_this, _is_native_reflect_construct() ? Reflect.construct(derived, args || [], _get_prototype_of(_this).constructor) : derived.apply(_this, args));
}
function _class_call_check(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _create_class(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _get_prototype_of(o) {
    _get_prototype_of = Object.setPrototypeOf ? Object.getPrototypeOf : function getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _get_prototype_of(o);
}
function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            writable: true,
            configurable: true
        }
    });
    if (superClass) _set_prototype_of(subClass, superClass);
}
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function _possible_constructor_return(self, call) {
    if (call && (_type_of(call) === "object" || typeof call === "function")) {
        return call;
    }
    return _assert_this_initialized(self);
}
function _set_prototype_of(o, p) {
    _set_prototype_of = Object.setPrototypeOf || function setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
    };
    return _set_prototype_of(o, p);
}
function _type_of(obj) {
    "@swc/helpers - typeof";
    return obj && typeof Symbol !== "undefined" && obj.constructor === Symbol ? "symbol" : typeof obj;
}
function _is_native_reflect_construct() {
    try {
        var result = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
    } catch (_) {}
    return (_is_native_reflect_construct = function() {
        return !!result;
    })();
}
var LimitOrderWithFee = /*#__PURE__*/ function(LimitOrder) {
    "use strict";
    _inherits(LimitOrderWithFee, LimitOrder);
    function LimitOrderWithFee(/**
         * Use `FeeTakerExtension.customReceiver` to set custom receiver
         */ orderInfo) {
        var makerTraits = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : _makertraits.MakerTraits.default(), feeExtension = arguments.length > 2 ? arguments[2] : void 0;
        _class_call_check(this, LimitOrderWithFee);
        var _this;
        makerTraits.enablePostInteraction();
        // to execute extension
        _this = _call_super(this, LimitOrderWithFee, [
            _object_spread_props(_object_spread({}, orderInfo), {
                receiver: feeExtension.address
            }),
            makerTraits,
            feeExtension.build()
        ]), _define_property(_this, "feeExtension", void 0), _this.feeExtension = feeExtension;
        return _this;
    }
    _create_class(LimitOrderWithFee, [
        {
            key: "getTakingAmount",
            value: /**
     * Calculates the `takingAmount` required from the taker in exchange for the `makingAmount`
     *
     * @param taker
     * @param makingAmount amount to be filled
     */ function getTakingAmount(taker) {
                var makingAmount = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.makingAmount;
                var takingAmount = (0, _amounts.calcTakingAmount)(makingAmount, this.makingAmount, this.takingAmount);
                return this.feeExtension.getTakingAmount(taker, takingAmount);
            }
        },
        {
            key: "getMakingAmount",
            value: /**
     * Calculates the `makingAmount` that the taker receives in exchange for the `takingAmount`
     *
     * @param taker
     * @param takingAmount amount to be filled
     */ function getMakingAmount(taker) {
                var takingAmount = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.takingAmount;
                var makingAmount = (0, _amounts.calcMakingAmount)(takingAmount, this.makingAmount, this.takingAmount);
                return this.feeExtension.getMakingAmount(taker, makingAmount);
            }
        },
        {
            key: "getResolverFee",
            value: /**
     * Fee in `takerAsset` which resolver pays to resolver fee receiver
     *
     * @param taker who will fill order
     * @param makingAmount amount wanted to fill
     */ function getResolverFee(taker) {
                var makingAmount = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.makingAmount;
                var takingAmount = (0, _amounts.calcTakingAmount)(makingAmount, this.makingAmount, this.takingAmount);
                return this.feeExtension.getResolverFee(taker, takingAmount);
            }
        },
        {
            key: "getIntegratorFee",
            value: /**
     * Fee in `takerAsset` which integrator gets to integrator wallet
     *
     * @param taker who will fill order
     * @param makingAmount amount wanted to fill
     */ function getIntegratorFee(taker) {
                var makingAmount = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.makingAmount;
                var takingAmount = (0, _amounts.calcTakingAmount)(makingAmount, this.makingAmount, this.takingAmount);
                return this.feeExtension.getIntegratorFee(taker, takingAmount);
            }
        },
        {
            key: "getProtocolFee",
            value: /**
     * Fee in `takerAsset` which protocol gets
     * It equals to `share from integrator fee plus resolver fee`
     *
     * @param taker who will fill order
     * @param makingAmount amount wanted to fill
     */ function getProtocolFee(taker) {
                var makingAmount = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.makingAmount;
                var takingAmount = (0, _amounts.calcTakingAmount)(makingAmount, this.makingAmount, this.takingAmount);
                return this.feeExtension.getProtocolFee(taker, takingAmount);
            }
        }
    ], [
        {
            key: "withRandomNonce",
            value: /**
     * Set random nonce to `makerTraits` and creates `LimitOrderWithFee`
     */ function withRandomNonce(/**
         * Use `FeeTakerExtension.recipients.tokensRecipient` to set custom receiver
         */ orderInfo, feeExtension) {
                var makerTraits = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : _makertraits.MakerTraits.default();
                makerTraits.withNonce((0, _randbigint.randBigInt)(_byteutils.UINT_40_MAX));
                return new LimitOrderWithFee(orderInfo, makerTraits, feeExtension);
            }
        },
        {
            key: "fromDataAndExtension",
            value: function fromDataAndExtension(data, extension) {
                var makerTraits = new _makertraits.MakerTraits(BigInt(data.makerTraits));
                var feeExt = _feetakerextension.FeeTakerExtension.fromExtension(extension);
                (0, _assert.default)(feeExt.address.equal(new _address.Address(data.receiver)), "invalid order: receiver must be FeeTaker extension address");
                return new LimitOrderWithFee({
                    salt: BigInt(data.salt),
                    maker: new _address.Address(data.maker),
                    makerAsset: new _address.Address(data.makerAsset),
                    takerAsset: new _address.Address(data.takerAsset),
                    makingAmount: BigInt(data.makingAmount),
                    takingAmount: BigInt(data.takingAmount)
                }, makerTraits, feeExt);
            }
        }
    ]);
    return LimitOrderWithFee;
}(_limitorder.LimitOrder);
