"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "Interaction", {
    enumerable: true,
    get: function() {
        return Interaction;
    }
});
var _byteutils = require("@1inch/byte-utils");
var _assert = /*#__PURE__*/ _interop_require_default(require("assert"));
var _address = require("../address.js");
function _class_call_check(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _create_class(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var Interaction = /*#__PURE__*/ function() {
    "use strict";
    function Interaction(target, data) {
        _class_call_check(this, Interaction);
        _define_property(this, "target", void 0);
        _define_property(this, "data", void 0);
        this.target = target;
        this.data = data;
        (0, _assert.default)((0, _byteutils.isHexBytes)(data), 'Interaction data must be valid hex bytes');
    }
    _create_class(Interaction, [
        {
            key: "encode",
            value: /**
     * Hex string with 0x. First 20 bytes are target, then data
     */ function encode() {
                return this.target.toString() + (0, _byteutils.trim0x)(this.data);
            }
        }
    ], [
        {
            key: "decode",
            value: /**
     * Create `Interaction` from bytes
     *
     * @param bytes Hex string with 0x. First 20 bytes are target, then data
     */ function decode(bytes) {
                var iter = _byteutils.BytesIter.HexString(bytes);
                return new Interaction(new _address.Address(iter.nextUint160()), iter.rest());
            }
        }
    ]);
    return Interaction;
}();
