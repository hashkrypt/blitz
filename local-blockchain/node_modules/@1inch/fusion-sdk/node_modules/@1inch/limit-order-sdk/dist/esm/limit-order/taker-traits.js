function _class_call_check(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _create_class(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
import { BitMask, BN, getBytesCount, trim0x } from '@1inch/byte-utils';
import { ZX } from '../constants.js';
export var AmountMode = /*#__PURE__*/ function(AmountMode) {
    /**
     * Amount provided to fill function treated as `takingAmount` and `makingAmount` calculated based on it
     */ AmountMode[AmountMode["taker"] = 0] = "taker";
    /**
     * Amount provided to fill function treated as `makingAmount` and `takingAmount` calculated based on it
     */ AmountMode[AmountMode["maker"] = 1] = "maker";
    return AmountMode;
}({});
/**
 * TakerTraitsLib
 * This class defines TakerTraits, which are used to encode the taker's preferences for an order in a single uint256.
 *
 * The TakerTraits are structured as follows:
 * High bits are used for flags
 * 255 bit `_MAKER_AMOUNT_FLAG`           - If set, the taking amount is calculated based on making amount, otherwise making amount is calculated based on taking amount.
 * 254 bit `_UNWRAP_WETH_FLAG`            - If set, the WETH will be unwrapped into ETH before sending to taker.
 * 253 bit `_SKIP_ORDER_PERMIT_FLAG`      - If set, the order skips maker's permit execution.
 * 252 bit `_USE_PERMIT2_FLAG`            - If set, the order uses the permit2 function for authorization.
 * 251 bit `_ARGS_HAS_TARGET`             - If set, then first 20 bytes of args are treated as receiver address for makerâ€™s funds transfer.
 * 224-247 bits `ARGS_EXTENSION_LENGTH`   - The length of the extension calldata in the args.
 * 200-223 bits `ARGS_INTERACTION_LENGTH` - The length of the interaction calldata in the args.
 * 0-184 bits                             - The threshold amount (the maximum amount a taker agrees to give in exchange for a making amount).
 */ export var TakerTraits = /*#__PURE__*/ function() {
    "use strict";
    function TakerTraits(flag, data) {
        _class_call_check(this, TakerTraits);
        _define_property(this, "flags", void 0);
        _define_property(this, "receiver", void 0);
        _define_property(this, "extension", void 0);
        _define_property(this, "interaction", void 0);
        this.flags = new BN(flag);
        this.receiver = data.receiver;
        this.extension = data.extension;
        this.interaction = data.interaction;
    }
    _create_class(TakerTraits, [
        {
            key: "getAmountMode",
            value: /**
     * Returns enabled amount mode, it defines how to treat passed amount in `fillContractOrderArgs` function
     *
     * @see AmountMode
     */ function getAmountMode() {
                return this.flags.getBit(TakerTraits.MAKER_AMOUNT_FLAG);
            }
        },
        {
            key: "setAmountMode",
            value: function setAmountMode(mode) {
                this.flags = this.flags.setBit(TakerTraits.MAKER_AMOUNT_FLAG, mode);
                return this;
            }
        },
        {
            key: "isNativeUnwrapEnabled",
            value: /**
     * Is the Wrapped native currency will be unwrapped into Native currency before sending to taker
     */ function isNativeUnwrapEnabled() {
                return this.flags.getBit(TakerTraits.UNWRAP_WETH_FLAG) === 1;
            }
        },
        {
            key: "enableNativeUnwrap",
            value: /**
     * Wrapped native currency will be unwrapped into Native currency before sending to taker
     */ function enableNativeUnwrap() {
                this.flags = this.flags.setBit(TakerTraits.UNWRAP_WETH_FLAG, 1);
                return this;
            }
        },
        {
            key: "disableNativeUnwrap",
            value: /**
     * Wrapped native currency will NOT be unwrapped into Native currency before sending to taker
     */ function disableNativeUnwrap() {
                this.flags = this.flags.setBit(TakerTraits.UNWRAP_WETH_FLAG, 0);
                return this;
            }
        },
        {
            key: "isOrderPermitSkipped",
            value: /**
     * If true, then maker's permit execution is skipped
     */ function isOrderPermitSkipped() {
                return Boolean(this.flags.getBit(TakerTraits.SKIP_ORDER_PERMIT_FLAG));
            }
        },
        {
            key: "skipOrderPermit",
            value: /**
     * The order skips maker's permit execution
     */ function skipOrderPermit() {
                this.flags = this.flags.setBit(TakerTraits.SKIP_ORDER_PERMIT_FLAG, 1);
                return this;
            }
        },
        {
            key: "isPermit2Enabled",
            value: /**
     * Should use permit2 function for authorization or not
     *
     * @see https://github.com/Uniswap/permit2
     */ function isPermit2Enabled() {
                return this.flags.getBit(TakerTraits.USE_PERMIT2_FLAG) === 1;
            }
        },
        {
            key: "enablePermit2",
            value: /**
     * Use permit2 function for authorization
     *
     * @see https://github.com/Uniswap/permit2
     */ function enablePermit2() {
                this.flags = this.flags.setBit(TakerTraits.USE_PERMIT2_FLAG, 1);
                return this;
            }
        },
        {
            key: "disablePermit2",
            value: /**
     * NOT use permit2 function for authorization
     */ function disablePermit2() {
                this.flags = this.flags.setBit(TakerTraits.USE_PERMIT2_FLAG, 0);
                return this;
            }
        },
        {
            key: "setReceiver",
            value: /**
     * Sets address where order filled to, `msg.sender` used if not set
     *
     * @param receiver
     */ function setReceiver(receiver) {
                this.receiver = receiver;
                return this;
            }
        },
        {
            key: "removeReceiver",
            value: /**
     * Set order receiver as `msg.sender`
     */ function removeReceiver() {
                this.receiver = undefined;
                return this;
            }
        },
        {
            key: "setExtension",
            value: /**
     * Sets extension, it is required to provide same extension as in order creation (if any)
     */ function setExtension(ext) {
                this.extension = ext;
                return this;
            }
        },
        {
            key: "removeExtension",
            value: function removeExtension() {
                this.extension = undefined;
                return this;
            }
        },
        {
            key: "setAmountThreshold",
            value: /**
     * Set threshold amount
     *
     * In taker amount mode: the minimum amount a taker agrees to receive in exchange for a taking amount.
     * In maker amount mode: the maximum amount a taker agrees to give in exchange for a making amount.
     *
     * @see AmountMode
     */ function setAmountThreshold(threshold) {
                this.flags = this.flags.setMask(TakerTraits.THRESHOLD_MASK, threshold);
                return this;
            }
        },
        {
            key: "getAmountThreshold",
            value: /**
     * Get threshold amount
     *
     * In taker amount mode: the minimum amount a taker agrees to receive in exchange for a taking amount.
     * In maker amount mode: the maximum amount a taker agrees to give in exchange for a making amount.
     *
     * @see AmountMode
     */ function getAmountThreshold() {
                return this.flags.getMask(TakerTraits.THRESHOLD_MASK).value;
            }
        },
        {
            key: "removeAmountThreshold",
            value: /**
     * @see setAmountThreshold
     */ function removeAmountThreshold() {
                this.flags = this.flags.setMask(TakerTraits.THRESHOLD_MASK, 0n);
                return this;
            }
        },
        {
            key: "setInteraction",
            value: /**
     * Sets taker interaction
     *
     * `interaction.target` should implement `ITakerInteraction` interface
     *
     * @see https://github.com/1inch/limit-order-protocol/blob/1a32e059f78ddcf1fe6294baed6cafb73a04b685/contracts/interfaces/ITakerInteraction.sol#L11
     */ function setInteraction(interaction) {
                this.interaction = interaction;
                return this;
            }
        },
        {
            key: "removeInteraction",
            value: function removeInteraction() {
                this.interaction = undefined;
                return this;
            }
        },
        {
            key: "encode",
            value: function encode() {
                var _this_receiver, _this_extension, _this_interaction;
                var extensionLen = this.extension ? getBytesCount(this.extension.encode()) : 0n;
                var interactionLen = this.interaction ? getBytesCount(this.interaction.encode()) : 0n;
                var flags = this.flags.setBit(TakerTraits.ARGS_HAS_RECEIVER, this.receiver ? 1 : 0).setMask(TakerTraits.ARGS_EXTENSION_LENGTH_MASK, extensionLen).setMask(TakerTraits.ARGS_INTERACTION_LENGTH_MASK, interactionLen);
                var args = (((_this_receiver = this.receiver) === null || _this_receiver === void 0 ? void 0 : _this_receiver.toString()) || ZX) + trim0x(((_this_extension = this.extension) === null || _this_extension === void 0 ? void 0 : _this_extension.encode()) || '') + trim0x(((_this_interaction = this.interaction) === null || _this_interaction === void 0 ? void 0 : _this_interaction.encode()) || '');
                return {
                    trait: flags.value,
                    args: args
                };
            }
        }
    ], [
        {
            key: "default",
            value: function _default() {
                return new TakerTraits(0n, {});
            }
        }
    ]);
    return TakerTraits;
}();
_define_property(TakerTraits, "MAKER_AMOUNT_FLAG", 255n);
_define_property(TakerTraits, "UNWRAP_WETH_FLAG", 254n);
_define_property(TakerTraits, "SKIP_ORDER_PERMIT_FLAG", 253n);
_define_property(TakerTraits, "USE_PERMIT2_FLAG", 252n);
_define_property(TakerTraits, "ARGS_HAS_RECEIVER", 251n);
_define_property(TakerTraits, "THRESHOLD_MASK", new BitMask(0n, 185n));
_define_property(TakerTraits, "ARGS_INTERACTION_LENGTH_MASK", new BitMask(200n, 224n));
_define_property(TakerTraits, "ARGS_EXTENSION_LENGTH_MASK", new BitMask(224n, 248n));
