function _array_like_to_array(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _array_with_holes(arr) {
    if (Array.isArray(arr)) return arr;
}
function _class_call_check(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _create_class(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _iterable_to_array_limit(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){
            _arr.push(_s.value);
            if (i && _arr.length === i) break;
        }
    } catch (err) {
        _d = true;
        _e = err;
    } finally{
        try {
            if (!_n && _i["return"] != null) _i["return"]();
        } finally{
            if (_d) throw _e;
        }
    }
    return _arr;
}
function _non_iterable_rest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _sliced_to_array(arr, i) {
    return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();
}
function _unsupported_iterable_to_array(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);
}
import { keccak256 } from 'ethers';
import { BytesIter, isHexString, trim0x, UINT_32_MAX } from '@1inch/byte-utils';
import assert from 'assert';
import { ZX } from '../../constants.js';
export var Extension = /*#__PURE__*/ function() {
    "use strict";
    function Extension() {
        var data = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : Extension.EMPTY;
        _class_call_check(this, Extension);
        _define_property(this, "makerAssetSuffix", ZX);
        _define_property(this, "takerAssetSuffix", ZX);
        _define_property(this, "makingAmountData", ZX);
        _define_property(this, "takingAmountData", ZX);
        _define_property(this, "predicate", ZX);
        _define_property(this, "makerPermit", ZX);
        _define_property(this, "preInteraction", ZX);
        _define_property(this, "postInteraction", ZX);
        _define_property(this, "customData", ZX);
        Object.entries(data).forEach(function(param) {
            var _param = _sliced_to_array(param, 2), key = _param[0], val = _param[1];
            return assert(isHexString(val) || val === ZX, "".concat(key, " must be valid hex string"));
        });
        this.makerAssetSuffix = data.makerAssetSuffix;
        this.takerAssetSuffix = data.takerAssetSuffix;
        this.makingAmountData = data.makingAmountData;
        this.takingAmountData = data.takingAmountData;
        this.predicate = data.predicate;
        this.makerPermit = data.makerPermit;
        this.preInteraction = data.preInteraction;
        this.postInteraction = data.postInteraction;
        this.customData = data.customData;
    }
    _create_class(Extension, [
        {
            key: "hasPredicate",
            get: function get() {
                return this.predicate !== ZX;
            }
        },
        {
            key: "hasMakerPermit",
            get: function get() {
                return this.makerPermit !== ZX;
            }
        },
        {
            key: "keccak256",
            value: function keccak2561() {
                return BigInt(keccak256(this.encode()));
            }
        },
        {
            key: "isEmpty",
            value: function isEmpty() {
                var allInteractions = this.getAll();
                var allInteractionsConcat = allInteractions.map(trim0x).join('') + trim0x(this.customData);
                return allInteractionsConcat.length === 0;
            }
        },
        {
            key: "encode",
            value: /**
     * Hex string with 0x
     */ function encode() {
                var allInteractions = this.getAll();
                var allInteractionsConcat = allInteractions.map(trim0x).join('') + trim0x(this.customData);
                // https://stackoverflow.com/a/55261098/440168
                var cumulativeSum = function(sum) {
                    return function(value) {
                        sum += value;
                        return sum;
                    };
                }(0);
                var offsets = allInteractions.map(function(a) {
                    return a.length / 2 - 1;
                }).map(cumulativeSum).reduce(function(acc, a, i) {
                    return acc + (BigInt(a) << BigInt(32 * i));
                }, 0n);
                var extension = '0x';
                if (allInteractionsConcat.length > 0) {
                    extension += offsets.toString(16).padStart(64, '0') + allInteractionsConcat;
                }
                return extension;
            }
        },
        {
            key: "getAll",
            value: function getAll() {
                var _this = this;
                return Extension.fields.map(function(f) {
                    return _this[f];
                });
            }
        }
    ], [
        {
            key: "decode",
            value: function decode(bytes) {
                if (bytes === ZX) {
                    return Extension.default();
                }
                var iter = BytesIter.HexString(bytes);
                var offsets = BigInt(iter.nextUint256());
                var consumed = 0;
                var data = {};
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = Extension.fields[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var field = _step.value;
                        var offset = Number(offsets & UINT_32_MAX);
                        var bytesCount = offset - consumed;
                        data[field] = iter.nextBytes(bytesCount);
                        consumed += bytesCount;
                        offsets = offsets >> 32n;
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                data.customData = iter.rest();
                return new Extension(data);
            }
        },
        {
            key: "default",
            value: function _default() {
                return new Extension();
            }
        }
    ]);
    return Extension;
}();
_define_property(Extension, "EMPTY", {
    makerAssetSuffix: ZX,
    takerAssetSuffix: ZX,
    makingAmountData: ZX,
    takingAmountData: ZX,
    predicate: ZX,
    makerPermit: ZX,
    preInteraction: ZX,
    postInteraction: ZX,
    customData: ZX
});
_define_property(Extension, "fields", [
    'makerAssetSuffix',
    'takerAssetSuffix',
    'makingAmountData',
    'takingAmountData',
    'predicate',
    'makerPermit',
    'preInteraction',
    'postInteraction'
]);
