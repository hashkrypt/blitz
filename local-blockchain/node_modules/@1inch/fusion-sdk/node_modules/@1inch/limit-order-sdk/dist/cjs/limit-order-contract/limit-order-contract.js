"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "LimitOrderContract", {
    enumerable: true,
    get: function() {
        return LimitOrderContract;
    }
});
var _ethers = require("ethers");
var _assert = /*#__PURE__*/ _interop_require_default(require("assert"));
var _AggregationRouterV6abijson = /*#__PURE__*/ _interop_require_default(require("../abi/AggregationRouterV6.abi.json"));
var _constants = require("../constants.js");
function _class_call_check(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _create_class(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var lopContract = new _ethers.Interface(_AggregationRouterV6abijson.default);
/**
 * @see https://github.com/1inch/limit-order-protocol/blob/3169ea46932ef44114a215a60d1d91ef022b416d/contracts/OrderMixin.sol#L27
 */ var LimitOrderContract = /*#__PURE__*/ function() {
    "use strict";
    function LimitOrderContract() {
        _class_call_check(this, LimitOrderContract);
    }
    _create_class(LimitOrderContract, null, [
        {
            key: "getFillOrderCalldata",
            value: /**
     *  Fill order WITHOUT an extension and taker interaction
     *
     *  @see getFillOrderArgsCalldata
     *  @see getFillContractOrderCalldata
     */ function getFillOrderCalldata(order, signature, takerTraits, amount) {
                var _Signature_from = _ethers.Signature.from(signature), r = _Signature_from.r, vs = _Signature_from.yParityAndS;
                var _takerTraits_encode = takerTraits.encode(), args = _takerTraits_encode.args, trait = _takerTraits_encode.trait;
                (0, _assert.default)(args === _constants.ZX, 'takerTraits contains args data, use LimitOrderContract.getFillOrderArgsCalldata method');
                return lopContract.encodeFunctionData('fillOrder', [
                    order,
                    r,
                    vs,
                    amount,
                    trait
                ]);
            }
        },
        {
            key: "getFillContractOrderCalldata",
            value: /**
     *  Fill contract order (order maker is smart-contract) WITHOUT an extension and taker interaction
     *
     *  @see getFillContractOrderArgsCalldata
     *  @see getFillOrderCalldata
     */ function getFillContractOrderCalldata(order, signature, takerTraits, amount) {
                var _takerTraits_encode = takerTraits.encode(), args = _takerTraits_encode.args, trait = _takerTraits_encode.trait;
                (0, _assert.default)(args === _constants.ZX, 'takerTraits contains args data, use LimitOrderContract.getFillContractOrderArgsCalldata method');
                return lopContract.encodeFunctionData('fillContractOrder', [
                    order,
                    signature,
                    amount,
                    trait,
                    args
                ]);
            }
        },
        {
            key: "getFillOrderArgsCalldata",
            value: /**
     *  Fill order WITH an extension or taker interaction
     *
     *  @see getFillOrderCalldata
     *  @see getFillContractOrderArgsCalldata
     */ function getFillOrderArgsCalldata(order, signature, takerTraits, amount) {
                var _Signature_from = _ethers.Signature.from(signature), r = _Signature_from.r, vs = _Signature_from.yParityAndS;
                var _takerTraits_encode = takerTraits.encode(), args = _takerTraits_encode.args, trait = _takerTraits_encode.trait;
                return lopContract.encodeFunctionData('fillOrderArgs', [
                    order,
                    r,
                    vs,
                    amount,
                    trait,
                    args
                ]);
            }
        },
        {
            key: "getFillContractOrderArgsCalldata",
            value: /**
     *  Fill contract order (order maker is smart-contract) WITH an extension or taker interaction
     *
     *  @see getFillOrderArgsCalldata
     *  @see getFillContractOrderCalldata
     */ function getFillContractOrderArgsCalldata(order, signature, takerTraits, amount) {
                var _takerTraits_encode = takerTraits.encode(), args = _takerTraits_encode.args, trait = _takerTraits_encode.trait;
                return lopContract.encodeFunctionData('fillContractOrderArgs', [
                    order,
                    signature,
                    amount,
                    trait,
                    args
                ]);
            }
        }
    ]);
    return LimitOrderContract;
}();
