"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var _feetakerextension = require("./fee-taker.extension.js");
var _fees = require("./fees.js");
var _resolverfee = require("./resolver-fee.js");
var _integratorfee = require("./integrator-fee.js");
var _address = require("../../../address.js");
var _bps = require("../../../bps.js");
var _interaction = require("../../interaction.js");
describe('FeeTakerExtension', function() {
    describe('serialize/deserialize', function() {
        it('all data', function() {
            var recipients = {
                integratorFeeRecipient: _address.Address.fromBigInt(2n),
                protocolFeeRecipient: _address.Address.fromBigInt(3n),
                tokensRecipient: _address.Address.fromBigInt(4n)
            };
            var extension = _feetakerextension.FeeTakerExtension.new(_address.Address.fromBigInt(1n), new _fees.Fees(new _resolverfee.ResolverFee(recipients.protocolFeeRecipient, _bps.Bps.fromPercent(2), _bps.Bps.fromPercent(1)), new _integratorfee.IntegratorFee(recipients.integratorFeeRecipient, recipients.protocolFeeRecipient, _bps.Bps.fromFraction(0.0001), _bps.Bps.fromPercent(5))), [
                _address.Address.fromBigInt(100n)
            ], {
                makerPermit: new _interaction.Interaction(_address.Address.fromBigInt(1n), '0xdeadbeef'),
                extraInteraction: new _interaction.Interaction(_address.Address.fromBigInt(99n), '0xdeadbeefdeadbeef'),
                customReceiver: recipients.tokensRecipient
            });
            expect(_feetakerextension.FeeTakerExtension.fromExtension(extension.build())).toEqual(extension);
        });
        it('only resolver data', function() {
            var recipients = {
                protocolFeeRecipient: _address.Address.fromBigInt(3n)
            };
            var extension = _feetakerextension.FeeTakerExtension.new(_address.Address.fromBigInt(1n), _fees.Fees.resolverFee(new _resolverfee.ResolverFee(recipients.protocolFeeRecipient, _bps.Bps.fromPercent(2))), [
                _address.Address.fromBigInt(100n)
            ]);
            expect(_feetakerextension.FeeTakerExtension.fromExtension(extension.build())).toEqual(extension);
        });
        it('only integrator data', function() {
            var recipients = {
                integratorFeeRecipient: _address.Address.fromBigInt(2n),
                protocolFeeRecipient: _address.Address.fromBigInt(3n)
            };
            var extension = _feetakerextension.FeeTakerExtension.new(_address.Address.fromBigInt(1n), _fees.Fees.integratorFee(new _integratorfee.IntegratorFee(recipients.integratorFeeRecipient, recipients.protocolFeeRecipient, _bps.Bps.fromFraction(0.0001), _bps.Bps.fromPercent(5))), [
                _address.Address.fromBigInt(100n)
            ]);
            expect(_feetakerextension.FeeTakerExtension.fromExtension(extension.build())).toEqual(extension);
        });
    });
    it('should calculate taking amount', function() {
        var takerAddress = _address.Address.fromBigInt(100n);
        var ext = _feetakerextension.FeeTakerExtension.new(_address.Address.fromBigInt(1n), _fees.Fees.resolverFee(new _resolverfee.ResolverFee(_address.Address.fromBigInt(2n), _bps.Bps.fromPercent(1))), [
            takerAddress
        ]);
        // mark taker as whitelisted resolver
        var takingAmount = ext.getTakingAmount(takerAddress, 100000000n);
        expect(takingAmount).toEqual(101000000n);
    });
    it('should calculate resolver fee', function() {
        var takerAddress = _address.Address.fromBigInt(100n);
        var ext = _feetakerextension.FeeTakerExtension.new(_address.Address.fromBigInt(1n), _fees.Fees.resolverFee(new _resolverfee.ResolverFee(_address.Address.fromBigInt(2n), _bps.Bps.fromPercent(1))), [
            takerAddress
        ]);
        // mark taker as whitelisted resolver
        var resolverFee = ext.getResolverFee(takerAddress, 100000000n);
        expect(resolverFee).toEqual(1000000n);
    });
    it('should calculate integrator fee', function() {
        var takerAddress = _address.Address.fromBigInt(100n);
        var ext = _feetakerextension.FeeTakerExtension.new(_address.Address.fromBigInt(1n), _fees.Fees.integratorFee(new _integratorfee.IntegratorFee(_address.Address.fromBigInt(2n), _address.Address.fromBigInt(3n), _bps.Bps.fromPercent(5), // fee
        _bps.Bps.fromPercent(10))), // share
        [
            takerAddress
        ]);
        // mark taker as whitelisted resolver
        var integratorFee = ext.getIntegratorFee(takerAddress, 100000000n);
        expect(integratorFee).toEqual(500000n);
    });
    // 10% from 5% = 0.5%
    it('should calculate protocol fee', function() {
        var protocolAddress = _address.Address.fromBigInt(111n);
        var takerAddress = _address.Address.fromBigInt(100n);
        var ext = _feetakerextension.FeeTakerExtension.new(_address.Address.fromBigInt(1n), new _fees.Fees(new _resolverfee.ResolverFee(protocolAddress, _bps.Bps.fromPercent(1)), new _integratorfee.IntegratorFee(_address.Address.fromBigInt(2n), protocolAddress, _bps.Bps.fromPercent(5), // fee
        _bps.Bps.fromPercent(10))), // share
        [
            takerAddress
        ]);
        // mark taker as whitelisted resolver
        var protocolFee = ext.getProtocolFee(takerAddress, 100000000n);
        expect(protocolFee).toEqual(1000000n + 4500000n);
    });
}) // 90% from 5% (integrator fee share)+ 1% (resolver fee) = 5.5%
;
