"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "WhitelistHalfAddress", {
    enumerable: true,
    get: function() {
        return WhitelistHalfAddress;
    }
});
function _class_call_check(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _create_class(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
var WhitelistHalfAddress = /*#__PURE__*/ function() {
    "use strict";
    function WhitelistHalfAddress(/**
         * Last 10 bytes of addresses
         */ addresses) {
        _class_call_check(this, WhitelistHalfAddress);
        _define_property(this, "addresses", void 0);
        this.addresses = addresses;
    }
    _create_class(WhitelistHalfAddress, [
        {
            key: "length",
            get: function get() {
                return this.addresses.length;
            }
        },
        {
            key: "isWhitelisted",
            value: function isWhitelisted(address) {
                var half = address.lastHalf();
                return this.addresses.some(function(w) {
                    return w === half;
                });
            }
        },
        {
            key: "encodeTo",
            value: function encodeTo(builder) {
                builder.addUint8(BigInt(this.addresses.length));
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = this.addresses[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var halfAddress = _step.value;
                        builder.addBytes(halfAddress);
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return builder;
            }
        }
    ], [
        {
            key: "new",
            value: function _new(addresses) {
                return new WhitelistHalfAddress((addresses === null || addresses === void 0 ? void 0 : addresses.map(function(w) {
                    return w.lastHalf();
                })) || []);
            }
        }
    ]);
    return WhitelistHalfAddress;
}();
